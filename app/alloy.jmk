
task('post:compile', function(config, logger){
	var wrench = require('wrench'),
		fs = require('fs'),
		path = require('path');

	var platformDir = config.alloyConfig.platform === 'ios' ? 'iphone' : config.alloyConfig.platform;
	var srcDir = path.join(config.dir.resources, platformDir);
	var files = wrench.readdirSyncRecursive(srcDir);

	files.forEach(function(file) {
		var fullpath = path.join(srcDir, file);
		if (!/ti\-commonjs\.js$/.test(file) && /\.js$/.test(file) && fs.statSync(fullpath).isFile()) {
			logger.info('wrapping ' + file + '...');
			wrapFile(file, fullpath);
		}
	});
});

function wrapFile(file, fullpath) {
	var fs = require('fs'),
		path = require('path');

	var filename = '/' + file,
		wrapperBase = '(function(tirequire,__dirname,__filename){',
		content = fs.readFileSync(fullpath, 'utf8'),
		code = wrapperBase;

	// make sure it isn't already wrapped
	if (content.indexOf(wrapperBase) === 0) {
		return;
	}

	// app.js has no module in Titanium. Create it.
	if (file === 'app.js') {
		code += 'var module={exports:{}};';
		code += 'var exports = module.exports;';
		code += 'tirequire.main=module;';
		code += 'module.id=".";';
	} else {
		code += 'module.id=__filename;';
	}

	code += 'module.loaded=false;';
	code += 'module.filename=__filename;';
	code += 'var require=tirequire("node_modules/ti-commonjs/lib/ti-commonjs")(__dirname,module);';
	code += 'module.require=require;';

	// This is a hack to fix alloy-based requires. Rather than changing the format of the path
	// to comply with ti-commonjs.js, I simple have it continue to use the Titanium require()
	// via tirequire(). This should eventually be handled in Alloy itself.
	code += content.replace(/require\((['"])alloy/g, 'tirequire($1alloy');

	code += '\nmodule.loaded=true;})(require,"' + path.dirname(filename) + '","' + filename + '");';
	fs.writeFileSync(fullpath, code);
}
